#!/usr/bin/python

import sys, glob,re
from xml.etree.ElementTree import Element, SubElement, Comment, ElementTree, tostring
from xml.dom import minidom

def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

MAG='Magnetic'
GPS='GPS'
MOT='Motion'
COM='Compass'
CAN='CAN'
BAR='Baro'

Sensors		= {	MAG	:	re.compile(r'^ATS:(\d+?),MX:(.+?),MY:(.+?),MZ:(.+?)\n'),
				GPS	:	re.compile(r'^GTS:(\d+?),GPA:(.+?),GPO:(.+?),GPH:(.+?),GPV:(.+?),GPS:(.+?)\n'),
				MOT	:	re.compile(r'^MTS:(\d+?),GX:(.+?),GY:(.+?),GZ:(.+?),AX:(.+?),AY:(.+?),AZ:(.+?),TR:(.+?),TP:(.+?),TY:(.+?),RR:(.+?),RP:(.+?),RY:(.+?),RX:(.+?),RY:(.+?),RZ:(.+?),MX:(.+?),MY:(.+?),MZ:(.+?),MA:(.+?),HX:(.+?),HY:(.+?),HZ:(.+?)\n'),
				COM	:	re.compile(r'^HTS:(\d+?),MD:(.+?),RH:(.+?),HX:(.+?),HY:(.+?),HZ:(.+?)\n'),
				CAN	:	re.compile(r'^CAN:(\d+?),.+41 0D (..).*?\n'),
				BAR	:	re.compile(r'^LTS:(.+?),AR:(.+?),PV:(.+?)\n')
}



MAGField = [	'MagX', 'MagY', 'MagZ' ]

#dm.magneticField.x
#dm.magneticField.y
#dm.magneticField.z

GPSField = [	'Lat', 'Lon', 'HorAcc', 'VerAcc', 'Spd' ]

#newLocation.coordinate.latitude
#newLocation.coordinate.longitude
#newLocation.horizontalAccuracy
#newLocation.verticalAccuracy
#newLocation.speed

MOTField = [	'GraX', 'GraY', 'GraZ', 'AccX', 'AccY', 'AccZ', 'Roll', 'Pitch', 'Yaw', 'RelRoll', 'RelPitch', 'RelYaw', 'RotRatX', 'RotRatY', 'RotRatZ', 'MagX', 'MagY', 'MagZ', 'MagAcc','HeadingX','HeadingY','HeadingZ' ]

#dm.gravity.x
#dm.gravity.y
#dm.gravity.z
#dm.userAcceleration.x
#dm.userAcceleration.y
#dm.userAcceleration.z
#attitude.roll the roll relate the start of the recording
#attitude.pitch
#attitude.yaw
#dm.attitude.roll the roll relate to the last recording
#dm.attitude.pitch
#dm.attitude.yaw
#dm.rotationRate.x
#dm.rotationRate.y
#dm.rotationRate.z
#dm.magneticField.field.x
#dm.magneticField.field.y
#dm.magneticField.field.z
#dm.magneticField.accuracy

COMField = [	'MagneticDirection',
				'RotationHeading',
				'HeadingX',
				'HeadingY',
				'HeadingZ' ]

BARField = [	'Altitude',
				'Pressure' ]

CANField = [	'VehSpd'	]

Field		= {	MAG	:	MAGField,
				GPS	:	GPSField,
				MOT	:	MOTField,
				COM	:	COMField,
				CAN	:	CANField,
				BAR	:	BARField
}


if __name__ == "__main__":
	if len(sys.argv) is 1:
		print "No input"
		sys.exit()
	inFiles = []
	for arg in sys.argv[1:]:
		inFiles += glob.glob(arg)
	if len(inFiles) < 1:
		print "No invalid input file"
		sys.exit()

	root = Element('SensorData')
	root.set('version', '1.0')
	root.append(Comment('Generated by log2xml.py for sensor data consolidation'))


	for inFile in inFiles:
		with open(inFile) as f:
			for line in f:

				# sensor: the name of the sensor, e.g. ACC
				for sensor in Sensors:
					data = Sensors.get(sensor).search(line)
					if data is None:
						continue
					
					# find a new record
					record = SubElement(root, 'data',{'sensorType':sensor,'relatedTime':str(float(data.group(1))/1000)})

					# fields: the name of the field of a sensor, e.g. GPA
					fields = Field.get(sensor)

					for i in range(2,len(data.groups())+1):
						instance = SubElement(record, fields[i-2])
						instance.text=data.group(i)

	print prettify(root)
